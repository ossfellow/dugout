name: wasmCloud Provenance and Attestation Test

on:
  workflow_dispatch:
    inputs:
      run-mode:
        description: 'Which jobs to run'
        type: choice
        required: true
        default: 'test-only'
        options:
          - test-only
          - cleanup-only
          - cleanup-and-test

env:
  WASMCLOUD_VERSION: 1.5.1

permissions:
  contents: write     # Required for release deletion
  packages: write     # Required for package deletion
  id-token: write    # Required for attestations

jobs:
  cleanup:
    runs-on: ubuntu-22.04
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete mock images
        if: github.event.inputs.run-mode == 'cleanup-only' || github.event.inputs.run-mode == 'cleanup-and-test'
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Delete images
          gh api \
            --method DELETE \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /user/packages/container/mock-attestation%2Fmock-wasmcloud

      - name: Delete releases
        if: github.event.inputs.run-mode == 'cleanup-only' || github.event.inputs.run-mode == 'cleanup-and-test'
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Check if release exists first
          if gh release view v${WASMCLOUD_VERSION} &>/dev/null; then
            gh release delete v${WASMCLOUD_VERSION} --yes
          fi

  test-attestation-setup:
    runs-on: ubuntu-22.04
    if: github.event.inputs.run-mode == 'test-only' || github.event.inputs.run-mode == 'cleanup-and-test'
    needs: [cleanup]
    steps:
      - name: Checkout mock-attestations repository
        uses: actions/checkout@v4

      - name: Clone wasmCloud repository
        uses: actions/checkout@v4
        with:
          repository: wasmCloud/wasmCloud
          path: wasmcloud

      - name: Install skopeo
        uses: warjiang/setup-skopeo@v0.1.3
        with:
          version: v1.17.0

      - name: Install regctl
        uses: iarekylew00t/regctl-installer@v3
        with:
          regctl-release: v0.7.2

      - name: 1- Download wasmCloud image with skopeo (custom skopeo format - dir:folder)
        run: |
          mkdir -p current-wasmcloud
          skopeo copy --all docker://ghcr.io/wasmcloud/wasmcloud:${WASMCLOUD_VERSION} dir:current-wasmcloud

      - name: 2- Inspect current image configuration files (Image Manifest V 2, Schema 2 - aka. Docker Distribution format)
        run: |
          echo "=== Image Manifest List ==="
          yq -P -oy current-wasmcloud/manifest.json
          echo

          echo "=== Processing Individual Manifests ==="
          for digest in $(yq -r '.manifests.[].digest' current-wasmcloud/manifest.json); do
            sha=${digest#sha256:}
            echo
            echo "=== Manifest for $digest ==="
            yq -P -oy current-wasmcloud/${sha}.manifest.json
            echo

            # Get config digest and show its contents
            config_digest=$(yq -r '.config.digest' current-wasmcloud/${sha}.manifest.json)
            config_sha=${config_digest#sha256:}
            echo
            echo "=== Config for $config_digest ==="
            yq -P -oy current-wasmcloud/${config_sha}.config.json
            echo
          done

      - name: 3- Download wasmCloud image with regctl (trasform to OCI layout, using OCI Image Format Specification v1.1)
        run: |
          regctl image copy \
            ghcr.io/wasmcloud/wasmcloud:${WASMCLOUD_VERSION} \
            ocidir://future-wasmcloud:${WASMCLOUD_VERSION} \
            --digest-tags \
            --referrers

      - name: 4- Get repository license
        id: license
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LICENSE=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" repos/wasmCloud/wasmCloud/license | jq -r .license.spdx_id)
          echo "license=${LICENSE}" >> $GITHUB_OUTPUT

      - name: 5- Add additional OCI annotations to image
        run: |
          regctl image mod \
          ocidir://future-wasmcloud:${WASMCLOUD_VERSION} \
          --replace \
          --to-oci \
          --to-oci-referrers \
          --label-to-annotation \
          --annotation="[*]org.opencontainers.image.authors=automation@wasmcloud.com" \
          --annotation="[*]org.opencontainers.image.licenses=${{ steps.license.outputs.license }}" \
          --annotation="[*]org.opencontainers.image.created=$(date -u +"%Y-%m-%dT%H:%M:%SZ")"

      - name: 6- Add a `mock` tag to image
        run: |
          regctl image copy \
            ocidir://future-wasmcloud:${WASMCLOUD_VERSION} \
            ocidir://future-wasmcloud:mock \
            --digest-tags \
            --referrers

      - name: 7- Inspect the resultant OCI image configuration files
        run: |
          echo "=== OCI Image Index (Multi-platform Manifest) ==="
          regctl image manifest ocidir://future-wasmcloud:${WASMCLOUD_VERSION} -v error | yq -P
          echo

          echo "=== Processing Individual Manifests ==="
          for digest in $(regctl image manifest ocidir://future-wasmcloud:${WASMCLOUD_VERSION} -v error | yq -r '.Manifests | with_entries(select(.key | test("Digest"))) | to_entries | .[].value'); do
            echo "=== Manifest for $digest ==="
            regctl blob get ocidir://future-wasmcloud:${WASMCLOUD_VERSION} ${digest} -v error | yq -P
            echo

            # Get and show config blob
            config_digest=$(regctl blob get ocidir://future-wasmcloud:${WASMCLOUD_VERSION} ${digest} -v error | yq -r '.config.digest')
            echo "=== Config for $config_digest ==="
            regctl blob get ocidir://future-wasmcloud:${WASMCLOUD_VERSION} ${config_digest} -v error | yq -P
            echo
          done

      - name: 8- Create OCI layout for SBOMs and attestations
        run: |
          regctl image create ocidir://attestations-n-sboms:${WASMCLOUD_VERSION}

      - name: 9- Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 10- Upload future-wasmcloud to local registry
        run: |
          regctl image copy \
            ocidir://future-wasmcloud:${WASMCLOUD_VERSION} \
            ghcr.io/${{ github.repository_owner }}/mock-attestation/mock-wasmcloud:${WASMCLOUD_VERSION} \
            --digest-tags \
            --referrers

      - name: 11- Get future-wasmcloud registry digest
        id: digest
        run: |
          DIGEST=$(regctl image digest ghcr.io/${{ github.repository_owner }}/mock-attestation/mock-wasmcloud:${WASMCLOUD_VERSION})
          echo "image_sha=${DIGEST}" >> $GITHUB_OUTPUT

      - name: 12- Stage wasmCloud binary
        run: |
          mkdir -p staging
          curl -L -o staging/mock-wasmcloud \
            https://github.com/wasmCloud/wasmCloud/releases/download/v${WASMCLOUD_VERSION}/wasmcloud-x86_64-unknown-linux-musl
          chmod +x staging/mock-wasmcloud

      - name: 13- Upload artifacts for attestation
        uses: actions/upload-artifact@v4
        with:
          name: attestation-inputs
          path: |
            staging/mock-wasmcloud
            attestations-n-sboms/
          retention-days: 1

    outputs:
      digest: ${{ steps.digest.outputs.image_sha }}
      version: ${{ env.WASMCLOUD_VERSION }}

  attest-binary:
    needs: [test-attestation-setup]
    uses: ossfellow/mock-attestations/.github/workflows/attest.yml@main
    with:
      type: binary
      subject-path: staging/mock-wasmcloud
      subject-name: mock-wasmcloud
      source-name: wasmcloud
      source-path: wasmcloud
      version: ${{ needs.test-attestation-setup.outputs.version }}
      generate-sbom: true
      source-language: rust

  attest-oci:
    needs: [test-attestation-setup]
    uses: ossfellow/mock-attestations/.github/workflows/attest.yml@main
    with:
      type: oci
      subject-name: ghcr.io/${{ github.repository_owner }}/mock-attestation/mock-wasmcloud
      subject-digest: ${{ needs.test-attestation-setup.outputs.digest }}
      source-name: wasmcloud
      source-path: wasmcloud
      version: ${{ needs.test-attestation-setup.outputs.version }}
      generate-sbom: true
      source-language: rust

  attest-go:
    needs: [test-attestation-setup]
    uses: ossfellow/mock-attestations/.github/workflows/attest.yml@main
    with:
      type: source
      subject-path: wasmcloud/examples/golang/components/http-hello-world
      subject-name: go-example
      version: ${{ needs.test-attestation-setup.outputs.version }}
      generate-sbom: true
      source-language: go

  attest-ts:
    needs: [test-attestation-setup]
    uses: ossfellow/mock-attestations/.github/workflows/attest.yml@main
    with:
      type: source
      subject-path: wasmcloud/examples/typescript/components/http-hello-world
      subject-name: ts-example
      version: ${{ needs.test-attestation-setup.outputs.version }}
      generate-sbom: true
      source-language: typescript

  attest-py:
    needs: [test-attestation-setup]
    uses: ossfellow/mock-attestations/.github/workflows/attest.yml@main
    with:
      type: source
      subject-path: wasmcloud/examples/python/components/http-hello-world
      subject-name: py-example
      version: ${{ needs.test-attestation-setup.outputs.version }}
      generate-sbom: true
      source-language: python

  # TODO: Use attestations-n-sboms for sbom and attestations verification
  verify:
    needs: [attest-binary, attest-oci]
    runs-on: ubuntu-22.04
    steps:
      - name: Verify binary attestation
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "=== Binary Build Provenance Attestation ==="
          gh attestation verify staging/mock-wasmcloud \
            --repo ${{ github.repository }} \
            --format json

          echo "=== Binary SBOM Attestation ==="
          gh attestation verify staging/mock-wasmcloud \
            --repo ${{ github.repository }} \
            --predicate-type https://spdx.dev/Document \
            --format json

      - name: Verify OCI image attestation
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "=== OCI Image Build Provenance Attestation ==="
          gh attestation verify \
            oci://ghcr.io/${{ github.repository_owner }}/mock-attestation/mock-wasmcloud \
            --repo ${{ github.repository }} \
            --bundle-from-oci \
            --format json

          echo "=== OCI Image SBOM Attestation ==="
          gh attestation verify \
            oci://ghcr.io/${{ github.repository_owner }}/mock-attestation/mock-wasmcloud \
            --repo ${{ github.repository }} \
            --bundle-from-oci \
            --predicate-type https://spdx.dev/Document \
            --format json

      - name: Download attested image for inspection
        run: |
          rm -rf future-wasmcloud
          regctl image copy \
            ghcr.io/${{ github.repository_owner }}/mock-attestation/mock-wasmcloud:${WASMCLOUD_VERSION} \
            ocidir://future-wasmcloud:${WASMCLOUD_VERSION} \
            --digest-tags \
            --referrers

      - name: Inspect attested image configuration files
        run: |
          find future-wasmcloud -type f -size -2048c -print0 | while IFS= read -r -d '' file; do
            echo
            echo "=== Contents of $file ==="
            yq -P -oy '.' "$file" 2>/dev/null || echo "Not a YAML/JSON file"
            echo
          done

      - name: Display SBOMs
        run: |
          echo "=== Go Example SBOM Packages ==="
          yq -P '.packages[] | select(.name != null) | {name: .name, version: .versionInfo, type: .SPDXID}' sbom-eval/go-example.spdx.json
          echo

          echo "=== TypeScript Example SBOM Packages ==="
          yq -P '.packages[] | select(.name != null) | {name: .name, version: .versionInfo, supplier: .supplier}' sbom-eval/ts-example.spdx.json
          echo

          echo "=== Python Example SBOM Packages ==="
          yq -P '.packages[] | select(.name != null) | {name: .name, version: .versionInfo, type: .SPDXID}' sbom-eval/py-example.spdx.json
          echo

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create release
          gh release create v${WASMCLOUD_VERSION} \
            --title "Mock wasmCloud v${WASMCLOUD_VERSION}" \
            --notes "Mock release for testing attestation workflow" \
            staging/mock-wasmcloud \
            staging/mock-wasmcloud-${WASMCLOUD_VERSION}.spdx.json

  # TODO move the GitHub release to verify jobn and the rest of this job
  release:
    needs: [verify]
    runs-on: ubuntu-22.04
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload image to mock-attestation repository
        run: |
          regctl image copy \
            ocidir://future-wasmcloud:${WASMCLOUD_VERSION} \
            ghcr.io/${{ github.repository_owner }}/mock-attestation/mock-wasmcloud:${WASMCLOUD_VERSION} \
            --digest-tags \
            --referrers

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create v${WASMCLOUD_VERSION} \
            --title "Mock wasmCloud v${WASMCLOUD_VERSION}" \
            --notes "Mock release for testing attestation workflow" \
            staging/mock-wasmcloud \
            staging/mock-wasmcloud-${WASMCLOUD_VERSION}.spdx.json
