name: oci-release

on:
  workflow_call:
    inputs:
      bin:
        description: Binary name
        required: true
        type: string
      prefix:
        description: Prefix name
        required: true
        type: string

permissions:
  contents: read
  packages: write
  id-token: write
  attestations: write

env:
  TEST_THIS_WORKFLOW: true # Whether to test this workflow
  RUN_OCI_ATTESTATION: true # Whether to run the OCI attestation workflow

jobs:
  oci:
    runs-on: ubuntu-22.04
    outputs:
      pushed-images: ${{ steps.push-images.outputs.images_json }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Prepare test environment
        uses: ossfellow/.github/actions/tugboat@main
        if: ${{ env.TEST_THIS_WORKFLOW }}
        with:
          target-repo: "wasmCloud/wasmCloud"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-assets: |
            ["actions/oci-transformations/action.yml"]

      - name: Install `nix`
        uses: ./.github/actions/install-nix

      - name: Extract tag context
        id: ctx
        run: |
          echo "owner=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"
          echo "sha_short=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

          version=${GITHUB_REF_NAME#${{ inputs.prefix }}v}
          echo "version=${version}" >> "$GITHUB_OUTPUT"
          echo "version is ${version}"
          if [[ $version == *"-"* ]]; then
            echo "version ${version} is a pre-release"
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Login to GitHub Container Registry
        if: startswith(github.ref, format('refs/tags/{0}v', inputs.prefix)) || github.ref == 'refs/heads/main'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install `skopeo`
        run: nix profile install --fallback --inputs-from . 'nixpkgs#skopeo'

      - name: Build `${{ inputs.bin }}` image
        run: |
          nix build -L .#${{ inputs.bin }}-oci-wolfi -o ./oci-wolfi

      - name: Inspect current ${{ inputs.bin}} image configuration files
        if: ${{ env.TEST_THIS_WORKFLOW }}
        run: |
          mkdir -p ${{ inputs.bin}}
          skopeo copy --all oci-archive:./oci-wolfi dir:${{ inputs.bin}}

          echo "=== Image Manifest List ==="
          yq -P -oy ${{ inputs.bin }}/manifest.json
          echo

          echo "=== Processing Individual Manifests ==="
          for digest in $(yq -r '.manifests.[].digest' ${{ inputs.bin }}/manifest.json); do
            sha=${digest#sha256:}
            echo
            echo "=== Manifest for $digest ==="
            yq -P -oy ${{ inputs.bin }}/${sha}.manifest.json
            echo

            # Get config digest and show its contents
            config_digest=$(yq -r '.config.digest' ${{ inputs.bin }}/${sha}.manifest.json)
            config_sha=${config_digest#sha256:}
            echo
            echo "=== Config for $config_digest ==="
            yq -P -oy ${{ inputs.bin }}/${config_sha}
            echo
          done

      - name: Upload OCI archive
        if: ${{ env.TEST_THIS_WORKFLOW }}
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: oci-wolfi
          path: ./
          overwrite: true

      - name: Push `${{ inputs.bin }}` version tag
        id: push-images
        if: ${{ env.RUN_OCI_ATTESTATION }} && (startswith(github.ref, format('refs/tags/{0}v', inputs.prefix)) || github.ref == 'refs/heads/main')
        continue-on-error: true
        # continue-on-error: ${{ env.TEST_THIS_WORKFLOW }}
        uses: ./.github/actions/oci-transformations
        with:
          source-image: oci-archive:./oci-wolfi
          source-tag: ${{ steps.ctx.outputs.version }}
          image-title: ${{ inputs.bin }}
          image-description: "${{ inputs.bin == 'wasmcloud' && 'wasmCloud runtime (Wolfi)' || 'wash CLI tool (Wolfi)' }}"
          image-version: ${{ steps.ctx.outputs.version }}
          image-authors: "automation@wasmcloud.com"
          show-metadata: true
          target-registries: |
            ghcr.io
          image-variants: |
            [
              {
                \"name\": \"wolfi\",
                \"tags\": [\"${{ steps.ctx.outputs.version }}-wolfi\"]
              }
            ]
          registry-credentials: |
            [
              {
                \"url\": \"ghcr.io\",
                \"username\": \"${{ github.actor }}\",
                \"password\": \"${{ secrets.GITHUB_TOKEN }}\"
              }
            ]

      - name: Read pushed images
        id: read-images
        run: |
          # First try to use the output from the action
          IMAGES_JSON="${{ steps.push-images.outputs.images_json }}"

          # If empty, try to read from the file
          if [ -z "$IMAGES_JSON" ] && [ -f "$GITHUB_WORKSPACE/pushed-images.json" ]; then
            IMAGES_JSON=$(cat "$GITHUB_WORKSPACE/pushed-images.json")
            echo "Reading from file: $IMAGES_JSON"
          fi

          # If we have JSON, set it as output
          if [ -n "$IMAGES_JSON" ]; then
            echo "images_json=$IMAGES_JSON" >> $GITHUB_OUTPUT
            echo "Found pushed images (length: $(echo "$IMAGES_JSON" | wc -c))"
          else
            echo "No pushed images found"
            echo "images_json=[]" >> $GITHUB_OUTPUT
          fi

      - name: Debug Output
        run: |
          echo "Output from push-images: '${{ steps.read-images.outputs.images_json }}'"
          echo "Length: $(echo '${{ steps.read-images.outputs.images_json }}' | wc -c)"

          # Parse the JSON to verify it's valid
          echo "Validating JSON format:"
          echo '${{ steps.read-images.outputs.images_json }}' | jq . || echo "Invalid JSON"

          # Count number of images in the array
          echo "Number of images: $(echo '${{ steps.read-images.outputs.images_json }}' | jq 'length')"

  attest-images:
    needs: oci
    if: ${{ needs.oci.outputs.pushed-images != '' && needs.oci.outputs.pushed-images != '[]' }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        image: ${{ fromJson(needs.oci.outputs.pushed-images || '[]') }}
    steps:
      - name: Prepare test environment
        if: ${{ env.RUN_OCI_ATTESTATION }}
        uses: ossfellow/.github/actions/tugboat@main
        with:
          target-repo: "wasmCloud/wasmCloud"
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-assets: |
            ["actions/artifact-attestation/action.yml"]

      # Attest the image
      - name: Attest Image
        if: ${{ env.RUN_OCI_ATTESTATION }}
        uses: ./.github/actions/artifact-attestation
        with:
          artifact-type: image
          subject-digest: ${{ matrix.image.digest }}
          subject-name: ${{ matrix.image.image }}
          show-summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-to-registry: true

      # Attest the image SBOM
      - name: Attest Image SBOM
        if: ${{ env.RUN_OCI_ATTESTATION }}
        uses: ./.github/actions/artifact-attestation
        with:
          artifact-type: sbom
          subject-digest: ${{ matrix.image.digest }}
          subject-name: ${{ matrix.image.image }}
          show-summary: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          push-to-registry: true
