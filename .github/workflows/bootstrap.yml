name: Bootstrap Test Environment

permissions:
  contents: read
  actions: write # Permission to trigger workflows

on:
  workflow_dispatch:
    inputs:
      target-repo:
        required: true
        type: string
        description: "GitHub repository to test (e.g., {owner}/{repo})"
        default: "wasmCloud/wasmcloud"
      github-assets:
        required: true
        type: string
        description: 'JSON array of workflows and actions to test (e.g.: ["workflows/provider.yml","actions/artifact-attestation/action.yml"])'
        default: '["workflows/wasmcloud.yml","workflows/provider.yml","workflows/oci.yml","actions/artifact-attestation/action.yml","actions/oci-transformations/action.yml","actions/sbom-generation/action.yml","actions/publish-sboms-and-attestations/action.yml"]'
      test-workflow:
        required: true
        type: string
        description: "Name of the workflow to trigger for testing"
        default: "wasmcloud"

jobs:
  cleanup:
    runs-on: ubuntu-22.04
    permissions:
      packages: write # For deleting packages
      contents: write # For deleting releases
    steps:
      - name: Debug: Print packages JSON
        run: |
          # Fetch and print the packages JSON for debugging
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/user/packages?package_type=container" | jq .

      - name: Delete packages
        continue-on-error: false # Don't fail if nothing to clean
        run: |
          # List packages for the authenticated user
          packages=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/user/packages?package_type=container")

          # Debug: Print the packages JSON
          echo "$packages" | jq .

          # Iterate over each package and delete if it matches the repository name
          for pkg in $(echo "$packages" | jq -r '.[] | select(.repository.name == "'${{ github.repository }}'") | .name'); do
            echo "Deleting package $pkg"
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/user/packages/container/$pkg"
          done

      - name: Delete releases
        continue-on-error: false # Don't fail if nothing to clean
        run: |
          # List releases for the repository
          releases=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases")

          # Iterate over each release and delete
          for release_id in $(echo "$releases" | jq -r '.[].id'); do
            echo "Deleting release with ID $release_id"
            curl -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$release_id"
          done

  bootstrap:
    needs: cleanup # Make sure cleanup runs first
    runs-on: ubuntu-22.04
    steps:
      # Only checkout dugout repository
      - name: Checkout dugout repository
        uses: actions/checkout@v4
        with:
          path: dugout

      # Use the tugboat action to setup test environment
      - uses: ossfellow/.github/actions/tugboat@main
        with:
          target-repo: ${{ inputs.target-repo }}
          github-assets: ${{ inputs.github-assets }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Debug step to verify setup
      - name: Verify test environment setup
        run: |
          echo "=== Current directory structure ==="
          ls -la
          echo
          echo "=== .github directory structure ==="
          find .github -type f | sort
          echo "=== End of listing ==="

      # Trigger test workflow
      - name: Trigger test workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: '${{ inputs.test-workflow }}.yml',
              ref: context.ref
            })
