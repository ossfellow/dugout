name: Bootstrap Test Environment

permissions:
  contents: read
  actions: write # Permission to trigger workflows

on:
  workflow_dispatch:
    inputs:
      target-repo:
        required: true
        type: string
        description: "GitHub repository to test (e.g., {owner}/{repo})"
        default: "wasmCloud/wasmcloud"
      github-assets:
        required: true
        type: string
        description: 'JSON array of workflows and actions to test (e.g.: ["workflows/provider.yml","actions/artifact-attestation/action.yml"])'
        default: '["workflows/wasmcloud.yml","workflows/provider.yml","actions/artifact-attestation/action.yml","actions/oci-transformations/action.yml","actions/sbom-generation/action.yml","actions/publish-sboms-and-attestations/action.yml"]'
      test-workflow:
        required: true
        type: string
        description: "Name of the workflow to trigger for testing"
        default: "wasmcloud"

jobs:
  cleanup:
    runs-on: ubuntu-22.04
    permissions:
      packages: write # For deleting packages
      contents: write # For deleting releases
    steps:
      - name: Delete existing packages and releases
        continue-on-error: true # Don't fail if nothing to clean
        uses: actions/github-script@v7
        with:
          script: |
            // Delete packages
            const packages = await github.rest.packages.listPackagesForOrganization({
              org: context.repo.owner,
              package_type: 'container'
            });

            for (const pkg of packages.data) {
              if (pkg.repository?.name === context.repo.repo) {
                console.log(`Deleting package ${pkg.name}`);
                await github.rest.packages.deletePackageForOrg({
                  org: context.repo.owner,
                  package_type: 'container',
                  package_name: pkg.name
                });
              }
            }

            // Delete releases
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            for (const release of releases.data) {
              console.log(`Deleting release ${release.tag_name}`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
            }

  bootstrap:
    needs: cleanup # Make sure cleanup runs first
    runs-on: ubuntu-22.04
    steps:
      # Only checkout dugout repository
      - name: Checkout dugout repository
        uses: actions/checkout@v4
        with:
          path: dugout

      # Use the tugboat action to setup test environment
      - uses: ossfellow/.github/actions/tugboat@main
        with:
          target-repo: ${{ inputs.target-repo }}
          github-assets: ${{ inputs.github-assets }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Debug step to verify setup
      - name: Verify test environment setup
        run: |
          echo "=== Current directory structure ==="
          ls -la
          echo
          echo "=== .github directory structure ==="
          find .github -type f | sort
          echo "=== End of listing ==="

      # Trigger test workflow
      - name: Trigger test workflow
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: '${{ inputs.test-workflow }}.yml',
              ref: context.ref
            })
